<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jig.mapper.NaiveMapper">
    <resultMap id="jig_position_map" type="com.jig.entity.jig.JigPosition">
        <result property="jig_cabinet_id" column="jig_cabinet_id"></result>
        <collection property="location_id" ofType="string">
            <result column="location_id"></result>
        </collection>
    </resultMap>
    <resultMap id="jig_list_by_select_count" type="java.lang.Integer">
        <result column="count"/>
    </resultMap>
    <resultMap id="jig_list_by_select_data" type="com.jig.entity.jig.JigEntity">
    </resultMap>
    <insert id="naive_input_purchase_jig">
        insert into jig_entity(code, seq_id, bill_no, reg_date, used_count)
        values (#{code}, #{seq_id}, #{bill_no}, now(), 0);

        insert into jig_position(code, seq_id, jig_cabinet_id, location_id, status)
        values (#{code}, #{seq_id}, #{jig_cabinet}, #{location}, 1);

        insert into outgo_income_history(code, seq_id, outgo_time, rec_id, status, description)
        values (#{code}, #{seq_id}, now(), #{user_id}, 3, #{description});

        UPDATE outgo_income_history a
            LEFT JOIN jig_entity b ON a.code = b.code and a.seq_id = b.seq_id
        SET a.jig_id = b.id
        where a.code = #{code}
          AND A.seq_id = #{seq_id};

        insert into regular_maintenance(code, seq_id, pm_period)
        values (#{code}, #{seq_id}, 30);

        update pending_purchase_income_submit
        set status = 1
        where bill_no = #{bill_no}
    </insert>
    <insert id="naiveInputJigEntity">
        insert into jig_entity(code, seq_id, bill_no, reg_date, used_count)
        values (#{code}, #{seq_id}, #{bill_no}, now(), 0);

        insert into jig_position(code, seq_id, jig_cabinet_id, location_id, bin, status)
        values (#{code}, #{seq_id}, #{jig_cabinet}, #{location}, #{bin}, 1);

        insert into outgo_income_history(code, seq_id, outgo_time, rec_id, status, description)
        values (#{code}, #{seq_id}, now(), #{user_id}, 3, #{description});

        insert into regular_maintenance(code, seq_id, pm_period)
        values (#{code}, #{seq_id}, 30)
    </insert>
    <select id="navieGetLocationList" resultMap="jig_position_map">
        select jp.jig_cabinet_id, jp.location_id, jd.workcell_id
        from jig_position jp
                 inner join jig_definition jd on jp.code = jd.code
        where jd.workcell_id = #{workcell_id}
        ORDER BY jig_cabinet_id + 0 asc, location_id asc
    </select>
    <select id="navieGetJigListByLocation" resultType="com.jig.entity.jig.JigStock">
        select *, count(jp.code) as 'count'
        from jig_position jp
                 inner join jig_entity je on jp.code = je.code and jp.seq_id = je.seq_id
                 inner join jig_definition jd on jp.code = jd.code
        where jd.workcell_id = #{workcell_id}
          and jp.jig_cabinet_id = #{jig_cabinet_id}
          and jp.location_id = #{jig_location_id}
          and jp.status = 1
        group by jp.code
        limit #{page_number}, #{page_size}
    </select>
    <select id="navieGetJigListByLocationPages" resultMap="jig_list_by_select_data, jig_list_by_select_count">
        select SQL_CALC_FOUND_ROWS *
        from jig_position jp
                 inner join jig_entity je on jp.code = je.code and jp.seq_id = je.seq_id
                 inner join jig_definition jd on jp.code = jd.code
        where jd.workcell_id = #{workcell_id}
          and jp.jig_cabinet_id = #{jig_cabinet_id}
          and jp.location_id = #{jig_location_id}
          and jp.status = 1
        group by jp.code;
        SELECT FOUND_ROWS() as count;
    </select>
    <select id="navieGetJigEntityListByLocation" resultType="com.jig.entity.jig.JigEntity">
        select je.*, jp.jig_cabinet_id, jp.location_id, jp.bin, jp.status, jd.* from jig_position jp inner join
        jig_definition jd on jp.code = jd.code
        inner join jig_entity je on jp.code = je.code and je.seq_id = jp.seq_id
        where jd.code = #{code} and jp.status = 1
        <if test="jig_cabinet_id != '' ">
            and jp.jig_cabinet_id = #{jig_cabinet_id}
        </if>
        <if test="jig_location_id != ''">
            and jp.location_id = #{jig_location_id}
        </if>
    </select>
    <select id="navieGetJigListBySelect" resultType="com.jig.entity.jig.JigStock">
        select *, count(jp.code) as 'count'
        from jig_position jp inner join jig_entity je on jp.code = je.code and jp.seq_id = je.seq_id
        inner join jig_definition jd on jp.code = jd.code
        <where>
            jd.workcell_id = #{workcell_id} and jp.status = 1
            <if test="jig_cabinet_id != '' ">
                and jp.jig_cabinet_id = #{jig_cabinet_id}
            </if>
            <if test="jig_location_id != '' ">
                and jp.location_id = #{jig_location_id}
            </if>
            <if test="code != '' ">
                and jp.code like concat('%',#{code},'%')
            </if>
            <if test="name != '' ">
                and jd.name like concat('%',#{name},'%')
            </if>
            <if test="user_for != '' ">
                and jd.user_for like concat('%',#{user_for},'%')
            </if>
        </where>
        group by jp.code
        limit #{page_number}, #{page_size}
    </select>
    <select id="navieGetJigListBySelectPages" resultMap="jig_list_by_select_data,jig_list_by_select_count">
        select SQL_CALC_FOUND_ROWS *
        from jig_position jp inner join jig_entity je on jp.code = je.code and jp.seq_id = je.seq_id
        inner join jig_definition jd on jp.code = jd.code
        <where>
            jd.workcell_id = #{workcell_id} and jp.status = 1
            <if test="jig_cabinet_id != '' ">
                and jp.jig_cabinet_id = #{jig_cabinet_id}
            </if>
            <if test="jig_location_id != '' ">
                and jp.location_id = #{jig_location_id}
            </if>
            <if test="code != '' ">
                and jp.code like concat('%',#{code},'%')
            </if>
            <if test="name != '' ">
                and jd.name like concat('%',#{name},'%')
            </if>
            <if test="user_for != '' ">
                and jd.user_for like concat('%',#{user_for},'%')
            </if>
        </where>
        group by jd.code;
        SELECT FOUND_ROWS() as 'count';
    </select>
    <select id="naive_get_out_and_in_history_list" resultType="com.jig.entity.out.OutgoSubmit">
        select oh.*, u.name as 'submit_name', u1.name as 'rec_name', pl.name as 'production_line_name'
        from outgo_income_history oh
                 left join user u on oh.submit_id = u.id
                 left join user u1 on oh.rec_id = u1.id
                 left join production_line pl on oh.production_line_id = pl.id
        where oh.code = #{code}
          and oh.seq_id = #{seq_id}
        order by oh.outgo_time desc
    </select>
    <select id="naive_get_maintenance_history_list" resultType="com.jig.entity.repair.MaintenanceSubmit">
        select rm.*, u.name as 'check_name', rt.name as 'repair_type_description'
        from regular_maintenance_history rm
                 left join user u on rm.check_id = u.id
                 left join repair_type rt on rm.repair_type = rt.id
        where rm.code = #{code}
          and rm.seq_id = #{seq_id}
        order by rm.check_time desc
    </select>
    <update id="naive_change_jig_position">
        update jig_position
        set jig_cabinet_id = #{jig_cabinet_id},
            location_id    = #{location_id},
            bin            = #{bin}
        where code = #{code}
          and seq_id = #{seq_id};

        insert into outgo_income_history(jig_id, code, seq_id, outgo_time, rec_id, status, description)
        values (#{jig_id}, #{code}, #{seq_id}, now(), #{user.id}, 2,
                concat(#{old_position}, ' => ', #{jig_cabinet_id}, '-', #{location_id}, '-', #{bin}))
    </update>
    <select id="navieGetMaintenanceJigDetailList" resultType="com.jig.entity.jig.JigEntity">
        select je.id, rm.code, rm.seq_id, rm.pm_period, rm.last_time, jp.jig_cabinet_id, jp.location_id, jp.bin
        from jig_position jp inner join regular_maintenance rm on jp.code = rm.code and jp.seq_id = rm.seq_id
        inner join jig_entity je on jp.code = je.code and jp.seq_id = je.seq_id
        where jp.code = #{code} and jp.status = 1
        <if test="jig_cabinet_id != '' ">
            and jp.jig_cabinet_id = #{jig_cabinet_id}
        </if>
        <if test="jig_location_id != ''">
            and jp.location_id = #{jig_location_id}
        </if>
    </select>
    <insert id="naiveOutgoJig">
        insert into outgo_income_history(jig_id, code, seq_id, submit_id, outgo_time, rec_id, status,
                                         production_line_id)
        values (#{jig_id}, #{code}, #{seq_id}, #{submit_id}, now(), #{rec_id}, 0, #{production_line_id});

        insert into outgoing_jig(id, code, seq_id, user_id, outgo_time, production_line_id)
        values (#{jig_id}, #{code}, #{seq_id}, #{submit_id}, now(), #{production_line_id});

        update jig_entity
        set used_count = used_count + 1
        where code = #{code}
          and seq_id = #{seq_id};

        update jig_position
        set status = 0
        where code = #{code}
          and seq_id = #{seq_id};
    </insert>
    <insert id="naive_maintenance_jig">
        insert into regular_maintenance_history(code, seq_id, reason, check_id, check_time, is_repair)
        values (#{code}, #{seq_id}, #{reason}, #{user_id}, now(), #{is_repair});

        update regular_maintenance
        set last_time = now()
        where code = #{code}
          and seq_id = #{seq_id}
    </insert>
    <select id="naiveGetOutgoingJigList" resultType="com.jig.entity.out.OutgoingJig">
        select *
        from outgoing_jig_entity_view
        <where>
            <if test="code != ''">
                and code like concat('%',#{code},'%')
            </if>
            <if test="user_for != ''">
                and user_for like concat('%',#{user_for},'%')
            </if>
            <if test="name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="start_date != '' and end_date !='' ">
                and (STR_TO_DATE(outgo_time,'%Y-%m-%d') BETWEEN '${start_date}' AND '${end_date}')
            </if>
        </where>
        limit #{page_number},#{page_size}
    </select>
    <select id="naiveGetOutgoingJigListAllPages" resultType="com.jig.entity.out.OutgoingJig">
        select *
        from outgoing_jig_entity_view
        <where>
            <if test="code != ''">
                and code like concat('%',#{code},'%')
            </if>
            <if test="user_for != ''">
                and user_for like concat('%',#{user_for},'%')
            </if>
            <if test="name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="start_date != '' and end_date !='' ">
                and (STR_TO_DATE(outgo_time,'%Y-%m-%d') BETWEEN '${start_date}' AND '${end_date}')
            </if>
        </where>
    </select>
    <select id="getOutgoingJigListPage" resultType="java.lang.Integer">
        select count(*)
        from outgoing_jig_entity_view
        <where>
            <if test="code != ''">
                and code like concat('%',#{code},'%')
            </if>
            <if test="user_for != ''">
                and user_for like concat('%',#{user_for},'%')
            </if>
            <if test="name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="start_date != '' and end_date !='' ">
                and (STR_TO_DATE(outgo_time,'%Y-%m-%d') BETWEEN '${start_date}' AND '${end_date}')
            </if>
        </where>
    </select>
    <update id="naiveReturnJig">
        update jig_position
        set status = 1
        where code = #{code}
          and seq_id = #{seq_id};
        insert into outgo_income_history(jig_id, code, seq_id, submit_id, outgo_time, rec_id, status,
                                         production_line_id)
        values (#{id}, #{code}, #{seq_id}, ${submit_id}, now(), #{rec_id}, 1, #{production_line_id})
    </update>
    <delete id="naiveDeleteOutgoingJig">
        delete
        from outgoing_jig
        where id = #{id}
    </delete>
    <select id="naiveGetRepairHistory" resultType="com.jig.entity.repair.RepairJigHistory">
        select rs.*, u1.name submit_name, u2.name accrptor_name
        from repair_submit_history rs
                 left join user u1 on rs.submit_id = u1.id
                 left join user u2 on acceptor_id = u2.id
        where submit_id = #{submit_id}
        limit #{page_number},#{page_size}
    </select>
    <select id="naiveGetRepairHistoryPage" resultType="java.lang.Integer">
        select count(*)
        from repair_submit_history
        where submit_id = #{submit_id};
    </select>
    <select id="naiveGetRepairList" resultType="com.jig.entity.repair.RepairJig">
        select rs.*, u1.name submit_name, u2.name accrptor_name
        from repair_submit rs
                 left join user u1 on rs.submit_id = u1.id
                 left join user u2 on acceptor_id = u2.id
        where submit_id = #{submit_id}
        limit #{page_number},#{page_size}
    </select>
    <select id="naiveGetRepairListPage" resultType="java.lang.Integer">
        select count(*)
        from repair_submit
        where submit_id = #{submit_id};
    </select>
    <insert id="naiveSubmitRepair" useGeneratedKeys="true" keyProperty="repair.id">
        update jig_position
        set status= 2
        where code = #{repair.code}
          and seq_id = #{repair.seq_id};
        insert into repair_submit(code, seq_id, repair_reason, repair_type, repair_photo_url, submit_time,
                                  submit_id, status)
        values (#{repair.code}, #{repair.seq_id}, #{repair.repair_reason}, #{repair.repair_type}, #{pathName}, now(),
                #{repair.submit_id}, 0);
    </insert>
    <select id="naiveSearchJigDefinition" resultType="com.jig.entity.jig.JigDefinition">
        select * from jig_definition_entity_view
        <where>
            <if test="code != null and code != ''">
                and code like concat('%',#{code},'%')
            </if>
            <if test="name != null and name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="workcell != null and workcell != ''">
                and workcell like concat('%',#{workcell},'%')
            </if>
            <if test="family != null and family != ''">
                and family like concat('%',#{family},'%')
            </if>
            <if test="userFor != null and userFor != ''">
                and user_for like concat('%',#{userFor},'%')
            </if>
        </where>
        limit #{pageNumber},#{page_size}
    </select>
    <select id="naiveSearchJigDefinitionPage" resultType="java.lang.Integer">
        SELECT count(*)
        FROM jig_definition_entity_view
        <where>
            <if test="code != null and code != ''">
                and code like concat('%',#{code},'%')
            </if>
            <if test="name != null and name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="workcell != null and workcell != ''">
                and workcell like concat('%',#{workcell},'%')
            </if>
            <if test="family != null and family != ''">
                and family like concat('%',#{family},'%')
            </if>
            <if test="userFor != null and userFor != ''">
                and user_for like concat('%',#{userFor},'%')
            </if>
        </where>
    </select>
    <select id="searchAllJigDefinition" resultType="com.jig.entity.jig.JigDefinition">
        SELECT * from jig_definition_entity_view
        <where>
            <if test="code != null">
                and code like concat('%',#{code},'%')
            </if>
            <if test="name != null">
                and name like concat('%',#{name},'%')
            </if>
            <if test="workcell != null">
                and workcell like concat('%',#{workcell},'%')
            </if>
            <if test="family != null">
                and family like concat('%',#{family},'%')
            </if>
            <if test="userFor != null">
                and user_for like concat('%',#{userFor},'%')
            </if>
        </where>
    </select>
    <select id="naiveGetOutgoingSubmit" resultType="com.jig.entity.out.OutgoSubmit">
        select *
        from outgo_submit_entity_view
        limit #{page_number},5
    </select>
    <select id="naiveGetOutgoSubmitPage" resultType="java.lang.Integer">
        select count(*)
        from outgo_submit_entity_view
    </select>
    <select id="getMaxSeqId" resultType="java.lang.Integer">
        select MAX(seq_id)
        from jig_entity
        where code = #{code}
    </select>
    <select id="naiveGetAllOutgoingJigList" resultType="com.jig.entity.out.OutgoingJig">
        select *
        from outgoing_jig_entity_view
        <where>
            <if test="code != ''">
                and code like concat('%',#{code},'%')
            </if>
            <if test="user_for != ''">
                and user_for like concat('%',#{user_for},'%')
            </if>
            <if test="name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="start_date != '' and end_date !='' ">
                and (STR_TO_DATE(outgo_time,'%Y-%m-%d') BETWEEN '${start_date}' AND '${end_date}')
            </if>
        </where>
    </select>
    <select id="naive_get_jig_trouble_percent_all" resultType="java.lang.Double">
        select (
                       (select count(*) as s1 from regular_maintenance_history where is_repair = 1)
                       /
                       (select count(*) as s2 from regular_maintenance_history)
                   )
    </select>
    <select id="naive_get_trouble_maintenance_list" resultType="com.jig.entity.repair.MaintenanceSubmit">
        select * from regular_maintenance_history
        <where>
            <if test="is_repair == 1">
                is_repair = 1
            </if>
        </where>
    </select>
    <select id="naive_get_trouble_reason_count_by_reason" resultType="java.lang.Integer">
        select count(*) from regular_maintenance_history
        <where>
            <if test="code != ''">
                and code = #{code}
            </if>
            <if test="seq_id != ''">
                and seq_id = #{seq_id}
            </if>
            <if test="code == '' and seq_id == ''">
                and is_repair = 1
            </if>
            and (reason like CONCAT('%|', #{reason}, '%') or reason like CONCAT('%', #{reason}, '|%') or reason like
            CONCAT(#{reason}, '%'))
        </where>
    </select>
    <select id="naive_get_reason_count_in_all" resultType="java.lang.Integer">
        select count(*)
        from regular_maintenance_history
        where (reason like CONCAT('%|', #{reason}, '%') or reason like CONCAT('%', #{reason}, '|%') or
               reason like CONCAT(#{reason}, '%'))
    </select>
    <select id="naive_get_pending_purchase_submit_list" resultType="com.jig.entity.purchase.PendingPuchaseIncomeSubmit">
        select *
        from pending_purchase_submit_entity_view
        where workcell_id = #{workcell_id}
          and status = #{status}
        limit #{page_number}, #{page_size}
    </select>
    <select id="naive_get_pending_purchase_submit_list_pages" resultType="java.lang.Integer">
        select count(*)
        from pending_purchase_submit_entity_view
        where workcell_id = #{workcell_id}
          and status = #{status}
    </select>
    <select id="naive_get_pending_scrap_submit_list" resultType="com.jig.entity.scrap.PendingScrapSubmit">
        select *
        from pending_scrap_submit_entity_view
        where workcell_id = #{workcell_id}
        limit #{page_number}, #{page_size}
    </select>
    <select id="naive_get_pending_scrap_submit_list_pages" resultType="java.lang.Integer">
        select count(*)
        from pending_scrap_submit_entity_view
        where workcell_id = #{workcell_id}
    </select>
    <insert id="naive_scrap_jig">
        insert into outgo_income_history(jig_id, code, seq_id, submit_id, outgo_time, rec_id, status)
        values (#{jig_id}, #{code}, #{seq_id}, #{submit_id}, now(), #{user_id}, 4);

        update pending_scrap_submit
        set status = 1
        where code = #{code}
          and seq_id = #{seq_id};

        delete
        from jig_entity
        where id = #{jig_id};

        delete
        from jig_position
        where code = #{code}
          and seq_id = #{seq_id};

        delete
        from regular_maintenance
        where code = #{code}
          and seq_id = #{seq_id}
    </insert>
    <select id="naive_get_pending_repair_submit_list" resultType="com.jig.entity.repair.PendingRepairSubmit">
        select *
        from pending_repair_submit_entity_view
        where workcell_id = #{workcell_id};
    </select>
    <select id="naive_get_pending_repair_submit_list_pages" resultType="java.lang.Integer">
        select count(*)
        from pending_repair_submit_entity_view
        where workcell_id = #{workcell_id}
    </select>
    <select id="naive_get_repair_man_list" resultType="com.jig.entity.common.User">
        select *
        from user
        where workcell_id = #{workcell_id}
          and type = 'repair'
    </select>
    <update id="naive_choose_repair_man">
        update pending_repair_submit
        set repair_man_id = #{repair_man_id},
            repair_time   = now(),
            status        = '1'
        where id = #{repair_submit_id}
    </update>
    <select id="naive_repair_finish">
        insert into regular_maintenance_history(code, seq_id, check_id, check_time, is_repair, repair_type)
        values (#{submit.code}, #{submidt.seq_id}, #{submit.repair_man_id}, now(), 2, #{submit.repair_type});

        update jig_position
        set status = '1'
        where code = #{submit.code}
          and seq_id = #{submit.seq_id};

        delete
        from pending_repair_submit
        where id = #{submit.id}
    </select>
    <select id="getARepairHistory" resultType="com.jig.entity.repair.RepairJigHistory">
        select *
        from repair_submit_history
        where id = #{id}
    </select>
</mapper>
